#!/usr/bin/env python3

"""
mango
> a simple script manager

This is the main instance of the mango script, and will automatically be placed in a path-included folder by the Mango Bootstrap.

A typical mango repo is formulated as follows:
- folder (called a mango repo)
    - .mango (call the mango folder)
        - .instructions (lists all instructions within this repo)
        - all scripts of this repo
"""

import argparse
import os, sys

def existMangoRepo(scan_path_str: str) -> bool:
    """check whether a directory is a mango repo

    Keyword arguments:
    - scan_path_str -- the string of the directory to check
    
    Return: bool for whether the directory is a mango repo
    """
    
    return os.path.exists(os.path.join(scan_path_str, ".mango"))

def closestMangoRepo() -> str:
    """find the first mango repo up the directory tree, raises a FileNotFoundError if none is found

    Return: string for the path of the closest mango repo
    """
    
    cur_exec_path_str = os.getcwd()
    while cur_exec_path_str != "/":
        if existMangoRepo(cur_exec_path_str):
            return cur_exec_path_str
        cur_exec_path_str = os.path.dirname(cur_exec_path_str)
    raise FileNotFoundError("mango repo not found")

def mangoFind(repo_path_str: str, command_name: str) -> str | None:
    """find the script that corresponds to a command in a mango repo
    
    Keyword arguments:
    - repo_path_str -- the string the mango repo
    - command_name -- the command typed in by the user
    
    Return: the path to the script if it exists, None if not
    """
    
    try:
        with open(os.path.join(repo_path_str, ".mango", ".instructions"), "r") as instructions_file:
            for line in instructions_file:
                line = line.strip()
                # print(line)
                if (len(line) == 0 or line.startswith("#")):
                    continue
                script, commands = line.split(":")
                commands = commands.split()
                if command_name in commands:
                    return os.path.join(repo_path_str, ".mango", script)
        return None
    except:
        print("Error occurred when parsing repo: " + repo_path_str, file=sys.stderr)
        raise SyntaxError("invalid .instructions file")
        # raise

def mangoRecursiveFind(repo_path_str: str, command_name: str) -> str | None:
    """find the script that corresponds to a command in a mango repo, recursively, by going up the directory tree
    
    Keyword arguments:
    - repo_path_str -- the string the mango repo
    - command_name -- the command typed in by the user, with the host flag `@` removed
    
    Return: the string of the script if it exists, None if not
    """
    while repo_path_str != "/":
        if not existMangoRepo(repo_path_str):
            repo_path_str = os.path.dirname(repo_path_str)
            continue
        script = mangoFind(repo_path_str, command_name)
        if script is not None:
            return os.path.join(repo_path_str, ".mango", script)
        repo_path_str = os.path.dirname(repo_path_str)
    return None

def mangoExecute(script_path_str: str, args: list[str]) -> None:
    """execute a script with arguments
    
    Keyword arguments:
    - script_path_str -- the string of the script to execute
    - args -- the list of arguments to pass to the script
    """
    
    os.system(f"{script_path_str} " + " ".join(args))

def mango():
    """the main function for the mango script
    """
    
    parser = argparse.ArgumentParser(
        description="Mango: a simple script manager",
        epilog=
'''Mango comes with a default set of host commands, which you can call using @. They include:

  init\t create a new mango repo, defaults to in the present working directory, using a template if specified
      \t - usage: mango @init [repo_path] (-t, --template [template_name])
      
  del\t delete the mango repo in a folder, defaulting to the present working directory, if it exists
     \t - usage: mango @del [repo_path]
  
  list\t list all the scripts in a mango repo, defaulting to the present working directory
      \t - usage: mango @list [repo_path]

  add\t create a new script in the current mango repo and open it in the default editor
     \t - usage: mango @add [script_name] (-b, --bind [command_name ...]) (--noopen)

  rm\t remove a script and all bindings from the current mango repo, if it exists
    \t - usage: mango @rm [script_name]

  bind\t bind a script to one or more commands in the current mango repo
      \t - usage: mango @bind [script_name] [command_name ...]

  unbind \t unbind a script from one or more commands in the current mango repo
         \t - usage: mango @unbind [script_name] [command_name ...]

  template \t register the current mango repo as a new template for use in the init command
           \t - usage: mango @template [template_name]

They can, but are not encouraged to, be overridden by user-defined scripts in a mango repo, or by parent repos.
''',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("command", help="The command to run. Host commands start with @")
    parser.add_argument("args", nargs=argparse.REMAINDER, help="Arguments to pass to the command", default=[])
    args = parser.parse_args()
    script = None
    
    try:
        if (args.command.startswith("@")):
            # this is a host command
            command = args.command[1:]
            script = mangoRecursiveFind(closestMangoRepo(), command)
            if script is None:
                print(f"Command '{command}' not found in any repo. Should it exist?", file=sys.stderr)
                return
        else:
            # this is a normal command
            script = mangoFind(closestMangoRepo(), args.command)
            if script is None:
                print(f"Command '{args.command}' not found in the current repo. Should it exist?", file=sys.stderr)
                return
        # execute the script
        mangoExecute(script, args.args)
    except FileNotFoundError as e:
        if str(e) == "mango repo not found":
            print("No mango repo found in any directory. Where's your home mango I wonder :P", file=sys.stderr)
        else:
            raise
    except SyntaxError as e:
        if str(e) == "invalid .instructions file":
            print("Invalid .instructions file. Does it exist? Or is there something wrong with it :<", file=sys.stderr)
        else:
            raise
    except:
        print("An unknown error occurred. I'm sorry, I'm not sure what happened :(", file=sys.stderr)
        raise

if __name__ == '__main__':
    mango()